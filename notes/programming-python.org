* Python Notes
** Introduction
Python is a very popular language thanks to it's simple construction, gigantic user community, and wide coverage of packages that allow you to do all kinds of interesting things. 

Here are some basic features of Python as a programming language:

- It is an **interpreted** language, meaning that the source code (the programs you write) are executed as-is without first compiling into an executable file (e.g. a file ending in `.exe` on Windows).
- It is **dynamically typed**, meaning that the code can adapt at runtime to encompass different variable types, object definitions, and code extensions. 
- It is **garbage-collected**, meaning that you do not have to worry (too much) about the low-level memory maps of the computer. 

These make it less optimized in terms of memory and execution speed compared with lower-level compiled languages like C++.  However, this is more than compensated for by the large user community, increased source-code readability, and science-focused packages that we'll be making use of in the lab.
** Installation
In our lab, we use the [[https://www.anaconda.com/distribution/][Anaconda]] distribution of Python. To break it down:

- *"Python"* is the name of the programming language as well as the program that executes Python code.
- *"Packages"* are additional chunks of Python code that you can =import= and use in your scripts or functions. They need to be installed somewhere that the Python program knows where to look for them (they're like R packages or MATLAB toolboxes).
- *"Conda"* is the name of a package manager -- since packages can come in different versions and are maintained separately, and some packages depend on *other* packages to work properly, the package manager helps by keeping track of things like which package versions are incompatible with the others. Basically it ensures that all of your packages will work with one another.
- Conda is also an *"environment manager"* -- but don't worry about that right now.
- *"Anaconda"* is a distribution of Python that includes Conda, as well as a bunch of other pre-installed packages that are very common in scientific Python installations.

To install:

- Go to the [[https://www.anaconda.com/distribution/][Anaconda]] site
- Click on "Download" button
- Select Python 3.7 version, Graphical Installer (unless you have a specific reason to select Python 2.7; if you do, you'll know)
- Read the [[https://docs.anaconda.com/anaconda/install/][Installation documentation]] if you have trouble getting it to install

** Basics
So how do you use Anaconda to... "do Python"? There are three main ways you can write Python code:

- *Python Interpreter*: On the command line (Terminal in MacOS, or Windows Command Prompt in Windows) you can type =python= and hit enter. This will start the interpreter. From here, you can enter commands one at a time and hit enter to execute them. The commands are interpreted right away and any output results are displayed. This isn't very efficient for longer bits of code, but if you just want to check something real quick, this works.
- *Python Scripts*: In a text editor, you can write files that end in a =.py= extension. These files are basically a long list of Python commands, i.e. "source code". If you write a script called =runme.py=, you can execute it from the command line by typing =python runme.py=. This is the "normal" way to write Python code that can be distributed to other users.
- *Jupyter Notebooks*: A "notebook" is basically a file that you can view in a web browser. When you open a notebook, you typically see a set of text fields that can be either "code cells" or "text cells". When you type Python code into the code cell and hit =shift= + =enter=, the code is sent to a Python program running in the background, which interprets the code and spits back the result. The whole thing is running in a single "session", so you can keep executing more code blocks and it will remember what you executed previously.

Jupyter Notebooks are the easiest way to get started learning Python. You can test code one chunk at a time, looking at the output as you go to make sure it's doing what you think it's doing.

To get started with Jupyter Notebooks, follow the list of tutorials here: [[http://mbakker7.github.io/exploratory_computing_with_python/][Exploratory Computing with Python]]. This will teach you both how to use Jupyter Notebooks as well as basic Python programming.
